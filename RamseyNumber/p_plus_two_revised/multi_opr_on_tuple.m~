% multi_opr_on_tuple(tuple)
% Input: tuple
% Output: array of tuples generated by multiple E's and F's
% WARNING: all input of tuples in normal form!!!

function result = multi_opr_on_tuple(tuple)
odd_op = '';
even_op = '';
old_list = cell(0);
new_list = {tuple};
% TODO:  get size of matrix by mapping function
% p is the size of operation
% r is size of matrix

% Assign sequence of operations depending on x = (0/1)
if tuple(1) == 1
    odd_op = 'E';
    even_op = 'F';
else
    odd_op = 'F';
    even_op = 'E';
end    

while true
    temp_list = {};
    % Adding opr result to temp list
    for j = 1:length(new_list)
        cur_index = new_list(j);
        if mod(i,2) ~= 0
            temp_list = [temp_list, gen_opr_on_tuple(cur_tuple,odd_op,p,r)];
        else
            temp_list = [temp_list, gen_opr_on_tuple(cur_tuple,even_op,p,r)];
        end
    end
    % Eleminate
    str = cellfun(@mat2str, temp_list, 'UniformOutput', false);
    str = unique(str);
    temp_list = cellfun(@str2mat,temp_list, 'UniformOutput', false);
    
    temp_list = setdiff(temp_list, [old_list, new_list]);
    old_list = [old_list, new_list];
    new_list = temp_list;
    % no new elements generated
    
    if isempty(temp_list)
        result = old_list;
        break;
    end
end

end